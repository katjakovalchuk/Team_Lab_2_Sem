import styles from "../scss/editor.module.scss";
import ElementEditor from "./editElement";
import { TextInput, } from "./textInput";
import { useEffect, useState } from "react";
import { FaArrowRight, FaArrowLeft, FaPlus, FaMinus, FaRedo } from "react-icons/fa"
import 'reveal.js/dist/reset.css';
import 'reveal.js/dist/reveal.css';
import "reveal.js/plugin/highlight/monokai.css";

function ToSection(obj) {
    switch (obj.type) {
        case "markdown":
        case "text":
            return `<span key=${obj.object_id} ${obj.attributes}>${obj.value}</span>`

        case "code":
            return (
                `<pre key=${obj.obejct_id}>
                    <code
                        data-line-numbers="1"
                        data-trim
                        ${obj.attributes}
                        data-noescape>
                        ${obj.value}
                    </code>
                </pre>`
            )

        case "img":
            return `<img
                ${obj.attributes}
                key=${obj.obejct_id}
                src=${obj.value} />`

        case "iframe":
            return `<iframe
                ${obj.attributes}
                key=${obj.object_id}
                allowFullScreen
                src=${obj.value} />`
    }
    return obj.value;
}

function ToPresentation(obj) {
    return Object.entries(obj).map((slideObject) => {
        let slide = slideObject[1];
        if (slide.content.map === undefined) {
            slide.content = []
        }
        // This is not pretty. Too bad!
        return <section key={`slide_${slide.slide_id}`} data-background-color={slide.background ? slide.background : "var(--nav-color)"} dangerouslySetInnerHTML={{ __html: slide.content.map(ToSection).join("") }} />
    })
}

export default function Editor() {
    const port = process.env.NEXT_PUBLIC_API_PORT || "80";
    const [presentationName, updatePresentationName] = useState("");
    const [slides, setSlides] = useState([
        {
            slide_id: 1,
            background: "#2e3440",
            content: [{
                object_id: 0,
                type: "text",
                attributes: "",
                value: "This is an example slide"
            }]
        }
    ]);
    const [slideIdx, setSlideIdx] = useState(0);
    const [curSlide, setCurSlide] = useState(slides[0]);

    // This is what MDN docs told me to do. Fuck JS 
    const deepCopy = (value) => {
        return JSON.parse(JSON.stringify(value));
    }

    const fetchPresentation = async () => {
        let splitPath = window.location.href.split("/");
        const pname = splitPath[4];
        updatePresentationName(pname);
        const baseURL = `${window.location.protocol}//${window.location.host.split(":")[0]}:${port}/user1`;
        const headers = { "Content-type": "application/json", 'Access-Control-Allow-Origin': '*' };
        const resp = await fetch(`${baseURL}/${pname}`, { headers: headers, method: "GET" });
        if (resp.status === 404) {
            await fetch(`${baseURL}/${pname}`, { method: "POST", headers: headers });
            setSlides([]);
            return;
        }
        const data = await resp.json();
        if (data.slides) {
            setSlides(deepCopy(data.slides).sort(v => v.slide_id));
        } else {
            setSlides([
                {
                    slide_id: 1,
                    background: "#2e3440",
                    content: []
                }
            ]);
        }
        setCurSlide(deepCopy([...slides[slideIdx]]));
    }

    const updateSlide = async () => {
        await fetchPresentation();
        const baseURL = `${window.location.protocol}//${window.location.host.split(":")[0]}:${port}/user1`;
        const slideResponse = await fetch(`${baseURL}/${presentationName}/update_slide`,
            {
                method: "PUT",
                headers: {
                    'Access-Control-Allow-Origin': '*',
                    "Accept": "application/json",
                    "Content-type": "application/json"
                },
                body: JSON.stringify({ ...curSlide }),
            }
        );
        const response = await slideResponse.json();
        if (response.status !== 200) {
            alert("Sorry, something went wrong.\nCould not save your presentation.")
        }
        await fetchPresentation();
        setCurSlide(deepCopy([...slides[slideIdx]]));
    }

    const updateElementContent = (element) => {
        let curSlides = deepCopy(slides);
        const updateFn = async (val) => {
            curSlides[slideIdx].content[element].value = val;
            setSlides([...curSlides]);
            await updateSlide();
            setCurSlide(deepCopy([...slides[slideIdx]]));
        }
        return updateFn;
    }

    const updateElementType = (element) => {
        let curSlides = deepCopy(slides);
        const updateFn = async (val) => {
            curSlides[slideIdx].content[element]["type"] = val;
            setSlides([...curSlides]);
            await updateSlide();
            setCurSlide(deepCopy([...slides[slideIdx]]));
        }
        return updateFn;
    }

    const updateElementAttributes = (element) => {
        let curSlides = deepCopy(slides);
        const updateFn = async (val) => {
            curSlides[slideIdx].content[element]["attributes"] = val;
            setSlides([...curSlides]);
            await updateSlide();
            setCurSlide(deepCopy([...slides[slideIdx]]));
        }
        return updateFn;
    }

    const removeComponent = (index) => {
        const updateFn = (_) => {
            const baseURL = `${window.location.protocol}//${window.location.host.split(":")[0]}:${port}/user1`;
            fetch(`${baseURL}/${presentationName}/${curSlide.slide_id}/remove_object?object_id=${curSlide.content[index].object_id}`,
                {
                    cache: "default",
                    method: "DELETE",
                    headers: {
                        'Access-Control-Allow-Origin': '*',
                        "Accept": "application/json",
                        "Content-type": "application/json"
                    },
                }
            )
                .then(response => {
                    if (response.status !== 200) {
                        alert("Sorry, something went wrong.\nCould not save your presentation.")
                        return;
                    }
                });

            fetchPresentation();
            setCurSlide(deepCopy([...slides[slideIdx]]));
        }
        return updateFn;
    }

    const removeSlide = () => {
        if (slides.length == 1)
            return;
        const baseURL = `${window.location.protocol}//${window.location.host.split(":")[0]}:${port}/user1`;
        try {
            fetch(`${baseURL}/${presentationName}/remove_slide?slide_id=${curSlide.slide_id}`,
                {
                    cache: "default",
                    method: "DELETE",
                    headers: {
                        'Access-Control-Allow-Origin': '*',
                        "Accept": "application/json",
                        "Content-type": "application/json"
                    },
                }
            )
                .then(response => {
                    if (response.status !== 200) {
                        alert("Sorry, something went wrong.\nCould not save your presentation.")
                        return;
                    }
                    fetchPresentation();
                    setCurSlide(deepCopy([...slides[slideIdx]]));
                });
        } catch {
            alert("Sorry, something went wrong.\nCould not save your presentation.")
        }
    }

    const updateColor = async (val) => {
        let curSlides = deepCopy(slides);
        curSlides[slideIdx].background = val;
        setSlides([...curSlides])
        await updateSlide();
        fetchPresentation();
        setCurSlide(deepCopy([...slides[slideIdx]]));
    }
    const clientSideInitialization = async () => {
        // load modules in browser
        const Reveal = await (await import("reveal.js")).default;
        const Markdown = await (await import("reveal.js/plugin/markdown/markdown.esm.js")).default;
        const Highlight = await (await import("reveal.js/plugin/highlight/highlight.esm.js")).default;
        let deck = new Reveal({
            plugins: [Markdown, Highlight],
            embedded: true,
            hash: true
        })
        deck.initialize()
        setInterval(() => {
            deck.sync();
            setCurSlide(deepCopy([...slides[slideIdx]]));
        }, 500);
        deck.addEventListener('ready', () => deck.slide(0))
    }
    useEffect(async () => {
        let splitPath = window.location.href.split("/");
        const pname = splitPath[4];
        updatePresentationName(pname);
        await fetchPresentation();
        // load modules in browser
        clientSideInitialization();
    }, [])

    return (
        <>
            <div className={styles.vertical}>
                <div className={styles.arrows}>
                    <FaArrowLeft onClick={async () => {
                        if (slideIdx - 1 >= 0) {
                            setSlideIdx(slideIdx - 1);
                        }
                        setCurSlide(deepCopy([...slides[slideIdx]]));
                        await fetchPresentation();
                    }
                    } />
                    <FaArrowRight onClick={async () => {
                        if ((slideIdx + 1) >= slides.length) {
                            const baseURL = `${window.location.protocol}//${window.location.host.split(":")[0]}:${port}/user1`;
                            try {
                                const headers = { "Content-type": "application/json", 'Access-Control-Allow-Origin': '*' };
                                fetch(`${baseURL}/${presentationName}/add_slide`, { headers: headers, mode: 'cors', method: "POST" })
                                    .catch(
                                        () => alert("Sorry, could not fetch the presentation data")
                                    );
                            } catch {
                                alert("Could not add slide. Sorry")
                            }
                        }
                        await fetchPresentation();
                        setSlideIdx(slideIdx + 1);
                        setCurSlide(deepCopy([...slides[slideIdx]]));
                    }
                    } />
                    <FaMinus onClick={removeSlide} />
                    <FaRedo onClick={fetchPresentation} />
                </div>
                <div className={styles.editorBox}>
                    <h2>
                        Slide {slideIdx + 1}
                        <FaPlus onClick={async () => {
                            const baseURL = `${window.location.protocol}//${window.location.host.split(":")[0]}:${port}/user1`;
                            try {
                                const headers = { "Content-type": "application/json", 'Access-Control-Allow-Origin': '*' };
                                fetch(`${baseURL}/${presentationName}/${curSlide.slide_id}/add_object`, { headers: headers, mode: 'cors', method: "POST" })
                                    .catch(
                                        () => alert("Sorry, could not fetch the presentation data")
                                    );
                            } catch {
                                alert("Could not add slide. Sorry")
                            }
                            await updateSlide();
                            setCurSlide(deepCopy([...slides[slideIdx]]));
                        }} />
                    </h2>
                    <TextInput
                        id={`background_color`}
                        placeholder={"Slide Background"}
                        required={false}
                        value={curSlide.background}
                        name={`${presentationName}_color`}
                        updateval={updateColor} />
                </div>
                {
                    Object.entries([...curSlide.content]).map(
                        v => {
                            return (<ElementEditor
                                key={`slide_component_${v[1].object_id}`}
                                type={v[1].type}
                                id={v[1].type}
                                name={v[1].object_id}
                                required={true}
                                value={v[1].value}
                                attrs={`${v[1].slide_id}_attrs`}
                                updateContent={updateElementContent(v[0])}
                                updateType={updateElementType(v[0])}
                                removeElement={removeComponent(v[0])}
                                updateAttrs={updateElementAttributes(v[0])} />)
                        }
                    )
                }
                <div className={["reveal", styles.presentation].join(" ")}>
                    <div className="slides">
                        {
                            ToPresentation(deepCopy(slides))
                        }
                    </div>
                </div>
            </div>
        </>
    )
}
